---
import { getCreatedAt, IMAGE_REGEX } from '@/utils/contents';
import { DEFAULT_PRODUCT_THUMBNAIL } from '@/utils/images';
import type { CollectionEntry } from 'astro:content';
import { pipe } from 'remeda';

interface Props {
  product: CollectionEntry<'products'>;
}
const { product: productCollection } = Astro.props;

const product = pipe(productCollection, (p) => {
  let thumbnail: string | undefined;
  let author: string | undefined;
  let description: string | undefined;
  let link: string | undefined;
  let value: string;

  p.body
    ?.split(/\n+/)
    .reverse()
    .forEach((c) => {
      const cnt = c.replace('\n', '');
      if (!cnt.startsWith('#')) {
        value = value ? `${cnt} ${value}` : cnt;
        return;
      }

      if (cnt.startsWith('# 説明')) description = value;
      else if (cnt.startsWith('# リンク')) link = value;
      else if (cnt.startsWith('# 制作者')) author = value;
      else if (cnt.startsWith('# サムネ')) {
        const matches = value.match(IMAGE_REGEX);
        if (matches) thumbnail = matches[2] || matches[3];
      }

      value = '';
    });

  return {
    data: p.data,
    description,
    thumbnail,
    author,
    link,
  };
});
---

<a href={product.link} target="_blank" class="article" data-haslink={product.link !== undefined}>
  <div class="thumbnail">
    <img src={product.thumbnail ?? DEFAULT_PRODUCT_THUMBNAIL.src} alt="post thumbnail" class="img" />
  </div>

  <div class="content">
    <h3>{product.data.title}</h3>

    <svg class="link" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        fill="currentColor"
        d="M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h7v2H5v14h14v-7h2v7q0 .825-.587 1.413T19 21zm4.7-5.3l-1.4-1.4L17.6 5H14V3h7v7h-2V6.4z"
      ></path>
    </svg>

    <p class="body">{product.description}</p>
    <p class="author">{product.author}</p>
    <p class="createdat">{getCreatedAt(productCollection, true)}</p>
  </div>
</a>

<style lang="scss">
  .article {
    border-radius: 5px;
    text-decoration: none;
    box-shadow: rgba(0, 0, 0, 0.15) 0px 0.5rem 1rem;
    position: relative;
    display: block;
    cursor: pointer;

    .thumbnail {
      width: 100%;
      height: 150px;
      overflow: hidden;
      position: relative;

      .img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        cursor: pointer;
        transition: transform 0.5s ease;
      }
    }

    .content {
      padding: 10px 20px;
      color: initial;
      position: relative;

      h3 {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        line-height: 1.5rem;
      }

      .link {
        width: 20px;
        position: absolute;
        top: 10px;
        right: 10px;
        fill: currentColor;
      }

      .body {
        height: 1.5rem;
        line-height: 1.5rem;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }

      .author {
        margin-top: 0.5rem;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }

      .createdat {
        text-align: right;
      }
    }

    &[data-haslink='true'] {
      &:hover {
        .thumbnail .img {
          transform: scale(1.05);
        }
      }
    }

    &[data-haslink='false'] {
      .link {
        display: none;
      }
    }
  }
</style>
